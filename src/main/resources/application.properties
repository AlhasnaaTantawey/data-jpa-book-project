spring.application.name=data-jpa-books-project
app.appName=data-jpa-books-project
app.appVersion=1.0

logging.level.org.springframework.validation=DEBUG
logging.level.org.springframework.web=DEBUG

##connect to mysql
# DataSource Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/book?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=12345
#logging.level.org.springframework.jdbc.core=trace

## to generate sql  each database should give dialct and version 
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.dialect =org.hibernate.dialect.MySQLDialect


## ou must create the database (schema) manually,
## but Hibernate will manage table creation and updates based on your entities if ddl-auto=update is set.
spring.jpa.hibernate.ddl-auto=update

logging.path.name=logs/application.log



logging.level.org.hibernate=info
logging.level.org.hibernate.SQL=debug

spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true


# Set the time zone for Hibernate
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

#spring.jackson.serialization.fail-on-empty-beans=false


# disable logging 

logging.pattern.console=

#file properties 
 
 logging.file.path=/logging/global/logs
 logging.file.name=${logging.file.path}/global.log
 logging.logback.rollingpolicy.max-file-size=5MB
 logging.logback.rollingpolicy.max-history=5
 
 #custome properties
 
 scheduler.enable=true
price.intervial=PT02S
interval-in-cron=0 * * * * *

# Flyway properties
#spring.flyway.enabled=true
#spring.flyway.url=jdbc:mysql://localhost:3306/book
#spring.flyway.user=root
#spring.flyway.password=Hasnaa1399@#
#spring.flyway.locations=classpath:db/migration
#spring.flyway.baseline-on-migrate=true
#spring.flyway.clean-on-validation-error=true
#spring.flyway.validate-on-migrate=true
#spring.flyway.compatibility-mode=true

#actuator
management.endpoints.web.exposure.include=*

# file properties



aws.s3.bucketName=your-bucket-name
aws.s3.accessKey=your-access-key
aws.s3.secretKey=your-secret-key

#google
#gcp.config.file=gcp-account-file.json
#gcp.project.id=imposing-pipe-356718
#gcp.bucket.id= media-bucket-007
#gcp.dir.name=dev

# Custom OpenAPI docs path
springdoc.api-docs.path=/api-docs
# Custom Swagger UI path
springdoc.swagger-ui.path=/swagger-ui.html
# Enable or disable Swagger UI (default: true)
springdoc.swagger-ui.enabled=true

# Enable or disable OpenAPI docs (default: true)
springdoc.api-docs.enabled=true

application-description=app used to find book belong to any auther 
application-version=app v1

# Redis server configuration
spring.redis.host=localhost           # Replace with your Redis server's hostname or IP
spring.redis.port=6379                # Default Redis port
spring.cache.type=redis               # Specify Redis as the caching type
spring.data.redis.repositories.enabled=false

#redis logging
logging.level.org.springframework.data.redis=DEBUG


#provider of redis create this config and if not create it\
#  \ spring boot create it but you donnot has all control in this cache
spring.cache.cache-names=cache1,cache2
spring.cache.redis.time-to-live=3600 # Default for all caches
spring.cache.redis.cache1.time-to-live=1800 # Specific TTL for cache1
spring.cache.redis.cache2.time-to-live=7200 # Specific TTL for cache2


#spring.devtools.restart.enabled=true
#spring.devtools.livereload.enabled=true

#spring.profiles.active=dev


